<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.projectnmt.dutyalram.repository.UserMapper">

    <resultMap id="UserResultMap" type="com.project.dutyalram.entity.User">
        <id property="id" column="id" />
        <result property="email" column="email" />
        <result property="password" column="password" />
        <result property="name" column="name" />
        <result property="role" column="role" />
        <result property="departmentId" column="department_id" />
    </resultMap>

    <resultMap id="RoleRegisterResultMap" type="com.projectnmt.dutyalram.entity.Authority">
        <id property="roleRegisterId" column="user_register_id"/>
        <result property="userId" column="user_id"/>
        <result property="roleId" column="role_id"/>
        <association property="role" resultMap="RoleResultMap"/>
    </resultMap>

    <resultMap id="RoleResultMap" type="com.projectnmt.dutyalram.entity.Role">
        <id property="roleId" column="role_id"/>
        <result property="roleName" column="role_name"/>
        <result property="roleNameKor" column="role_name_kor"/>
    </resultMap>
    <resultMap id="MessageResultMap" type="com.projectnmt.dutyalram.dto.resp.MessageRespDto">
        <id property="messageId" column="message_id" />
        <result property="teamLogoImgUrl" column="team_logo_img_url" />
        <result property="teamName" column="team_name" />
        <result property="message" column="message_text"/>
        <result property="isTeam" column="is_team" />
        <result property="senderId" column="sender_id"/>
        <result property="date" column="create_date" />
    </resultMap>
    <resultMap id="teamMemberResultMap" type="com.projectnmt.dutyalram.entity.TeamMember">
        <id property="teamMemberId" column="team_member_tb_id"/>
        <result property="teamId" column="team_id"/>
        <result property="userId" column="user_id"/>
        <result property="teamRoleId" column="team_role_id"/>
    </resultMap>
    <insert
            id="saveUser"
            parameterType="com.projectnmt.dutyalram.entity.User"
            keyProperty="userId"
            useGeneratedKeys="true"
    >
        insert into
        user_tb
        values
        (
        0,
        #{username},
        #{password},
        #{name},
        #{phoneNumber},
        #{email},
        #{gender},
        #{age},
        #{profileImg}
        )
    </insert>

    <insert id="saveRole">
        insert into
        authority_tb
        values
        (
        0,
        #{userId},
        #{roleId});
    </insert>
    <delete id="deleteUserByUserId">
        delete
        from
        user_tb
        where
        user_id = #{userId}
    </delete>
    <delete id="deleteAuthority">
        delete
        from
        authority_tb
        where
        user_id = #{userId}
    </delete>
    <delete id="deleteTeamByTeamId">
        delete
        from
        team_tb
        where
        team_id = #{teamId}
    </delete>
    <delete id="deleteTeamMemberByTeamId">
        delete
        from
        team_member_tb
        where
        team_id = #{teamId}
    </delete>
    <delete id="deleteTeamMemberByUserId">
        delete
        from
        team_member_tb
        where
        user_id = #{userId}
    </delete>
    <delete id="deleteOAuth2ByUserId">
        delete
        from
        oauth2_tb
        where
        user_id = #{userId}
    </delete>
    <delete id="deleteMessageById">
        delete
        from
        message_tb
        where
        getter_id = #{id}
        and is_team = #{isTeam}
    </delete>

    <select
            id="findUserByUsername"
            parameterType="string"
            resultMap="UserResultMap"
    >
        select
        ut.user_id,
        ut.username,
        ut.password,
        ut.name,
        ut.phone_number,
        ut.email,
        ut.gender,
        ut.age,
        ut.profile_img,
        aut.authority_id,
        aut.role_id,
        rt.role_name,
        rt.role_name_kor
        from
        user_tb ut
        left outer join authority_tb aut on(aut.user_id = ut.user_id)
        left outer join role_tb rt on(rt.role_id = aut.role_id)
        where
        username = #{username}
    </select>

    <select id="findUserTest" resultMap="UserResultMap">
        select
        user_id,
        username,
        password,
        name,
        phone_number,
        email,
        gender,
        age,
        profile_img
        from
        user_tb
        where
        user_id = 1;
    </select>
    <select id="getMessageList" resultMap="MessageResultMap">
        select
        mt.message_id,
        tt.team_logo_img_url,
        tt.team_name,
        mt.message_text,
        mt.create_date,
        mt.sender_id,
        mt.is_team
        from
        message_tb mt
        left outer join team_tb tt on(tt.team_id = mt.sender_id)
        where
        getter_id = #{id}
        and is_team = #{isTeam}
    </select>
    <select id="findUserByUserId" resultMap="UserResultMap">
        select
        ut.user_id,
        ut.username,
        ut.password,
        ut.name,
        ut.phone_number,
        ut.email,
        ut.gender,
        ut.age,
        ut.profile_img,
        rt.role_id,
        rt.role_name,
        rt.role_name_kor
        from
        user_tb ut
        left outer join authority_tb aut on(aut.user_id = ut.user_id)
        left outer join role_tb rt on(rt.role_id = aut.role_id)
        where
        ut.user_id = #{user_id};
    </select>
    <select id="findTeamMemberByUserId" resultMap="teamMemberResultMap">
        select
        team_id,
        team_role_id
        from
        team_member_tb
        where
        user_id = #{userId}
    </select>
    <select id="findTeamMemberListByTeamId" resultMap="teamMemberResultMap">
        select
        user_id
        from
        team_member_tb
        where
        team_id = #{teamId};
    </select>
    <insert id="sendMessage">
        insert into message_tb
        values(0, 0, 0, #{userId}, #{message}, now());
    </insert>

    <insert
            id="saveOAuth2"
            parameterType="com.projectnmt.dutyalram.entity.OAuth2"
            keyProperty="oAuth2Id"
            useGeneratedKeys="true"
    >
        insert into oauth2_tb
        values(0, #{oAuth2Name}, #{userId}, #{providerName}, now(), now())
    </insert>

    <select id="findUserByOAuth2name" resultMap="UserResultMap">
        select
        ut.user_id,
        ut.username,
        ut.password,
        ut.name,
        ut.email,
        rrt.authority_id,
        rrt.role_id,
        rt.role_name,
        rt.role_name_kor,
        oat.oauth2_id,
        oat.oauth2_name,
        oat.provider_name
        from
        user_tb ut
        left outer join oauth2_tb oat on(oat.user_id = ut.user_id)
        left outer join authority_tb rrt on(rrt.user_id = ut.user_id)
        left outer join role_tb rt on(rt.role_id = rrt.role_id)
        where
        oat.oauth2_name = #{oAuth2Name}
    </select>
    <select id="getParticipateCountByuserId"
            resultType="com.projectnmt.dutyalram.dto.resp.ParticipateCountRespDto">
        select
        count(user_id) as donationCount,
        sum(donation_amount) as donationAmount
        from
        donator_tb
        where
        user_id = #{userId}
    </select>

    <update id="updateUser" parameterType="com.projectnmt.dutyalram.entity.User">
        UPDATE
        user_tb
        SET
        name = #{name},
        email = #{email},
        age = #{age},
        gender = #{gender},
        phone_number = #{phoneNumber}
        WHERE
            user_id = #{userId}
        </update>

    <update id="updatePassword" parameterType="com.projectnmt.dutyalram.entity.User">
        UPDATE
        user_tb
        SET
        password = #{password}
        WHERE
        user_id = #{userId}
    </update>
</mapper>